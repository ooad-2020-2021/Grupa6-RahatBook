// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RahatBookApp.Data;

namespace RahatBookApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210614215150_NewMigration2")]
    partial class NewMigration2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(767)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RahatBookAplikacija.Models.Gost", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("datumRodjenja")
                        .HasColumnType("datetime");

                    b.Property<string>("ime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("prezime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Gost");
                });

            modelBuilder.Entity("RahatBookAplikacija.Models.KontaktInfo", b =>
                {
                    b.Property<int>("idSJ")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("prezime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("telefon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("idSJ");

                    b.ToTable("KontaktInfo");
                });

            modelBuilder.Entity("RahatBookAplikacija.Models.Login", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("idKorisnika")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Login");
                });

            modelBuilder.Entity("RahatBookAplikacija.Models.Lokacija", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("adresa")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("drzava")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("grad")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("postanskiBroj")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Lokacija");
                });

            modelBuilder.Entity("RahatBookAplikacija.Models.Popust", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("idSJ")
                        .HasColumnType("int");

                    b.Property<DateTime>("krajObracuna")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("pocetakObracuna")
                        .HasColumnType("datetime");

                    b.Property<double>("procenat")
                        .HasColumnType("double");

                    b.Property<DateTime>("zaRezervacijeDO")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("zaRezervacijeOD")
                        .HasColumnType("datetime");

                    b.HasKey("id");

                    b.ToTable("Popust");
                });

            modelBuilder.Entity("RahatBookAplikacija.Models.Recenzija", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("idSJ")
                        .HasColumnType("int");

                    b.Property<string>("komentar")
                        .HasColumnType("text");

                    b.Property<int>("ocjena")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Recenzija");
                });

            modelBuilder.Entity("RahatBookAplikacija.Models.RegistrovaniKorisnik", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("datumRodjenja")
                        .HasColumnType("datetime");

                    b.Property<int>("idLokacije")
                        .HasColumnType("int");

                    b.Property<string>("ime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("prezime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("RegistrovaniKorisnik");

                    b.HasDiscriminator<string>("Discriminator").HasValue("RegistrovaniKorisnik");
                });

            modelBuilder.Entity("RahatBookAplikacija.Models.Rezervacija", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("dolazak")
                        .HasColumnType("datetime");

                    b.Property<bool>("ekskurzija")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("idKorisnika")
                        .HasColumnType("int");

                    b.Property<int>("idSJ")
                        .HasColumnType("int");

                    b.Property<DateTime>("odlazak")
                        .HasColumnType("datetime");

                    b.HasKey("id");

                    b.ToTable("Rezervacija");
                });

            modelBuilder.Entity("RahatBookAplikacija.Models.SJSobe", b =>
                {
                    b.Property<int>("idSJ")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("idVrstaSobe")
                        .HasColumnType("int");

                    b.Property<int>("ukupanBrojSoba")
                        .HasColumnType("int");

                    b.Property<int>("ukupanBrojZauzetihSoba")
                        .HasColumnType("int");

                    b.HasKey("idSJ");

                    b.ToTable("SJSobe");
                });

            modelBuilder.Entity("RahatBookAplikacija.Models.SmjestajnaJedinica", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("brojZvjezdica")
                        .HasColumnType("int");

                    b.Property<int>("idKarakteristike")
                        .HasColumnType("int");

                    b.Property<int>("idLokacije")
                        .HasColumnType("int");

                    b.Property<int>("idUsluge")
                        .HasColumnType("int");

                    b.Property<string>("naziv")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<int>("tip")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("SmjestajnaJedinica");
                });

            modelBuilder.Entity("RahatBookAplikacija.Models.Upit", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("datumKreiranja")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("datumOdgovora")
                        .HasColumnType("datetime");

                    b.Property<int>("idOd")
                        .HasColumnType("int");

                    b.Property<int>("idZa")
                        .HasColumnType("int");

                    b.Property<string>("odgovor")
                        .HasColumnType("text");

                    b.Property<string>("pitanje")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("procitan")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("id");

                    b.ToTable("Upit");
                });

            modelBuilder.Entity("RahatBookAplikacija.Models.VrstaSobe", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("brojGostiju")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("VrstaSobe");
                });

            modelBuilder.Entity("Uplata", b =>
                {
                    b.Property<int>("idRezervacije")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("brojRata")
                        .HasColumnType("int");

                    b.Property<int>("idPopusta")
                        .HasColumnType("int");

                    b.Property<int>("nacinPlacanja")
                        .HasColumnType("int");

                    b.Property<int>("sredstvoPlacanja")
                        .HasColumnType("int");

                    b.HasKey("idRezervacije");

                    b.ToTable("Uplata");
                });

            modelBuilder.Entity("RahatBookAplikacija.Models.Administrator", b =>
                {
                    b.HasBaseType("RahatBookAplikacija.Models.RegistrovaniKorisnik");

                    b.HasDiscriminator().HasValue("Administrator");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
